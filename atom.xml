<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chipmunkkk.github.io</id>
    <title>Shawzb</title>
    <updated>2021-11-03T15:31:07.662Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chipmunkkk.github.io"/>
    <link rel="self" href="https://chipmunkkk.github.io/atom.xml"/>
    <subtitle>Shawzb&apos;s Blog</subtitle>
    <logo>https://chipmunkkk.github.io/images/avatar.png</logo>
    <icon>https://chipmunkkk.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Shawzb</rights>
    <entry>
        <title type="html"><![CDATA[HashMap]]></title>
        <id>https://chipmunkkk.github.io/post/hashmap/</id>
        <link href="https://chipmunkkk.github.io/post/hashmap/">
        </link>
        <updated>2021-11-02T15:47:35.000Z</updated>
        <content type="html"><![CDATA[<p>本文记录下 Map 最常用的实现类 <code>HashMap</code> 相关的高频的面试知识点。</p>
<h3 id="hashmap-的底层数据结构">HashMap 的底层数据结构</h3>
<p>数组 + 链表。结合了数组和链表二者的优点，利用数组可以在计算<code>键</code>的 hash 值以后快速的定位到所属位置，而当发生 hash 冲突（即两个<code>键</code>的 hash 值相等）时，又可以将元素以链表的形式存储。在 JDK 1.8 以后当链表的长度超过8以后会转变为红黑树。</p>
<h3 id="hashmap-的工作原理">HashMap 的工作原理</h3>
<ul>
<li>根据 HashMap 的底层结构可以知道，要想确定一个<code>键值对（K/V）</code>的位置要对 K 进行 hash 运算，再结合当前数组长度确定一个下标</li>
<li>如果计算出的下标没有元素（未发生 hash 冲突），那就依据当前的键值对构造一个 <code>Node</code> 放入数组中</li>
<li>如果发生 hash 冲突时，先判断二者的 K 是否相等，如果相等说明是同一个元素，此时更新键值对的值即可</li>
<li>如果 K 不相等，那就将当前元素插入到链表当中（JDK 1.7 是头插，1.8 是尾插）</li>
<li>插入元素后判断当前数组的长度是否大于 capacity * loadfactor，如果大于，会对整个数组进行扩容，新的数组长度为 2 * capacity，之后对 HashMap 中的所有 K 重新进行 hash，确定在新数组中的位置</li>
</ul>
<h3 id="hash-算法的实现">Hash 算法的实现</h3>
<pre><code class="language-java">static final int hash(Object key) {
    int h;
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);
}
</code></pre>
<p>计算 K 的 hashCode 的高16位异或低16位的值，让高16位的值参与了 hash 运算，而且减少了 hash 冲突的概率</p>
<h3 id="如何确定-table-的容量loadfactor-又是什么">如何确定 table 的容量？loadFactor 又是什么？</h3>
<ul>
<li>table 数组的长度由 capacity 决定，默认值是16，最大值是 1 &lt;&lt; 30</li>
<li>loadFactor 是负载因子，用于规定 table 数组是否需要扩容。默认的负载因子是 0.75</li>
</ul>
<h3 id="jdk17-和-jdk18-中的-hashmap-有什么不同">JDK1.7 和 JDK1.8 中的 HashMap 有什么不同</h3>
<ul>
<li>底层数据结构不同，1.7 中是数组 + 链表，而在 1.8 中当链表的长度大于 8 且数组长度大于 64 时会转变为红黑树（小于 6 时会重新变回链表）</li>
<li>在发生 hash 冲突时，1.7 中是插入到链表的头部，而 1.8 则是插入链表尾部</li>
</ul>
<h3 id="高并发下-hashmap-会出现什么问题">高并发下 HashMap 会出现什么问题</h3>
<p>上面提到在 1.8 中链表的插入位置从头部变成尾部了，主要原因就是在高并发下头插会修改链表元素的位置导致产生环</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://chipmunkkk.github.io/post/hello-gridea/</id>
        <link href="https://chipmunkkk.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>